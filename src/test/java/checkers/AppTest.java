/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package checkers;

import checkers.exception.BadMoveException;
import org.junit.Test;

import java.util.stream.Stream;

import static org.junit.Assert.*;

public class AppTest {
	@Test
	public void cloneTest() {
		CheckersBoard initBoard = CheckersBoard.initBoard();
		CheckersBoard clone = initBoard.clone();
		assertEquals(initBoard, clone);
			try {
				clone.processMove(clone.possibleMoves().get(0));
			} catch (BadMoveException e) {
				fail(e.getMessage());
			}
		assertNotEquals(initBoard, clone);
	}

	@Test
	public void countPiecesTest() {
		CheckersBoard initBoard = CheckersBoard.initBoard();
		assertEquals(12, initBoard.countPiecesOfPlayer(CheckersBoard.Player.BLACK));
		assertEquals(12, initBoard.countPiecesOfPlayer(CheckersBoard.Player.RED));
	}

	@Test
	public void moveTest() {
		CheckersBoard initBoard = CheckersBoard.initBoard();
		try {
			initBoard.processMove(CheckersMove.builder().fromPosition(2, 1).toPosition(3, 0).build());
		} catch (BadMoveException ex) {
			assertEquals("You must move YOUR pieces!", ex.getMessage());
		}
		try {
			initBoard.processMove(CheckersMove.builder().fromPosition(5, 0).toPosition(-1, 4).build());
		} catch (BadMoveException ex) {
			assertEquals("All coordinates must be between [0-7]!", ex.getMessage());
		}
		try {
			initBoard.processMove(CheckersMove.builder().fromPosition(6, 1).toPosition(5, 0).build());
		} catch (BadMoveException ex) {
			assertEquals("You can only move into empty spaces!", ex.getMessage());
		}
		try {
			initBoard.processMove(CheckersMove.builder().fromPosition(5, 2).toPosition(3, 4).build());
		} catch (BadMoveException ex) {
			assertEquals("You can only capture your opponent's pieces!", ex.getMessage());
		}
		try {
			initBoard.processMove(CheckersMove.builder().fromPosition(5, 0).toPosition(3, 6).build());
			fail("An invalid move was accepted!");
		} catch (BadMoveException ex) {
			assertEquals("You can only move 1 space away, or capture 2 spaces away!", ex.getMessage());
		}
	}

	@Test
	public void gameTest() {
		CheckersBoard board = CheckersBoard.initBoard();
		Stream.of(//
				CheckersMove.builder().fromPosition(5,6).toPosition(4,5).build(),//
				CheckersMove.builder().fromPosition(2,3).toPosition(3,4).build(),//
				CheckersMove.builder().fromPosition(4,5).toPosition(2,3).build(),//
				CheckersMove.builder().fromPosition(1,4).toPosition(3,2).build(),//
				CheckersMove.builder().fromPosition(6,7).toPosition(5,6).build(),//
				CheckersMove.builder().fromPosition(2,7).toPosition(3,6).build(),//
				CheckersMove.builder().fromPosition(5,2).toPosition(4,1).build(),//
				CheckersMove.builder().fromPosition(0,3).toPosition(1,4).build(),//
				CheckersMove.builder().fromPosition(4,1).toPosition(2,3).build(),//
				CheckersMove.builder().fromPosition(1,4).toPosition(3,2).build(),//
				CheckersMove.builder().fromPosition(7,6).toPosition(6,7).build(),//
				CheckersMove.builder().fromPosition(3,2).toPosition(4,1).build(),//
				CheckersMove.builder().fromPosition(5,0).toPosition(3,2).build(),//
				CheckersMove.builder().fromPosition(2,1).toPosition(4,3).build(),//
				CheckersMove.builder().fromPosition(5,4).toPosition(3,2).build(),//
				CheckersMove.builder().fromPosition(1,2).toPosition(2,1).build(),//
				CheckersMove.builder().fromPosition(6,1).toPosition(5,0).build(),//
				CheckersMove.builder().fromPosition(2,1).toPosition(4,3).build(),//
				CheckersMove.builder().fromPosition(6,3).toPosition(5,4).build(),//
				CheckersMove.builder().fromPosition(1,0).toPosition(2,1).build(),//
				CheckersMove.builder().fromPosition(5,4).toPosition(3,2).build(),//
				CheckersMove.builder().fromPosition(3,2).toPosition(1,0).build(),//
				CheckersMove.builder().fromPosition(0,1).toPosition(1,2).build(),//
				CheckersMove.builder().fromPosition(6,5).toPosition(5,4).build(),//
				CheckersMove.builder().fromPosition(3,6).toPosition(4,7).build(),//
				CheckersMove.builder().fromPosition(5,4).toPosition(4,3).build(),//
				CheckersMove.builder().fromPosition(4,7).toPosition(6,5).build(),//
				CheckersMove.builder().fromPosition(7,4).toPosition(5,6).build(),//
				CheckersMove.builder().fromPosition(2,5).toPosition(3,4).build(),//
				CheckersMove.builder().fromPosition(4,3).toPosition(2,5).build(),//
				CheckersMove.builder().fromPosition(1,6).toPosition(3,4).build(),//
				CheckersMove.builder().fromPosition(7,2).toPosition(6,1).build(),//
				CheckersMove.builder().fromPosition(3,4).toPosition(4,5).build(),//
				CheckersMove.builder().fromPosition(5,6).toPosition(3,4).build(),//
				CheckersMove.builder().fromPosition(1,2).toPosition(2,1).build(),//
				CheckersMove.builder().fromPosition(3,4).toPosition(2,5).build(),//
				CheckersMove.builder().fromPosition(0,7).toPosition(1,6).build(),//
				CheckersMove.builder().fromPosition(2,5).toPosition(0,7).build(),//
				CheckersMove.builder().fromPosition(2,1).toPosition(3,2).build(),//
				CheckersMove.builder().fromPosition(6,7).toPosition(5,6).build(),//
				CheckersMove.builder().fromPosition(0,5).toPosition(1,4).build(),//
				CheckersMove.builder().fromPosition(0,7).toPosition(1,6).build(),//
				CheckersMove.builder().fromPosition(3,2).toPosition(4,1).build(),//
				CheckersMove.builder().fromPosition(5,0).toPosition(3,2).build(),//
				CheckersMove.builder().fromPosition(1,4).toPosition(2,3).build(),//
				CheckersMove.builder().fromPosition(3,2).toPosition(1,4).build()//
		).forEach(move -> {//
			try {
				board.processMove(move);
			} catch (BadMoveException e) {
				board.printBoard();
				fail(e.getMessage());
			}
		});
		board.printBoard();
	}
}
